/*//GEN-FIRST:event_quitButtonActionPerformed
 * Copyright 2018 ZComApproach Inc.//GEN-LAST:event_quitButtonActionPerformed
 *
 * Licensed under multiple open source licenses involved in the project (the "Licenses");
 * you may not use this file except in compliance with the Licenses.
 * You may obtain copies of the Licenses at
 *
 *      http://www.zcomapproach.com/licenses
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.zcomapproach.garden.peony.security.dialogs;

import com.zcomapproach.commons.ZcaValidator;
import com.zcomapproach.commons.data.values.ZcaBooleanValue;
import com.zcomapproach.garden.data.constant.GardenBooleanValue;
import com.zcomapproach.garden.data.constant.GardenSupportedLanguage;
import com.zcomapproach.garden.peony.PeonyLauncher;
import com.zcomapproach.garden.peony.kernel.events.PeonyLoginFailedEvent;
import com.zcomapproach.garden.peony.kernel.events.PeonyLoginSuccessfulEvent;
import com.zcomapproach.garden.peony.kernel.events.PeonyLogoutEvent;
import com.zcomapproach.garden.peony.settings.PeonyProperties;
import com.zcomapproach.garden.peony.settings.PeonyPropertiesKey;
import com.zcomapproach.garden.peony.kernel.services.PeonySecurityService;
import com.zcomapproach.garden.peony.kernel.events.PeonyServiceEvent;
import com.zcomapproach.garden.peony.kernel.events.ProgressStatusEvent;
import com.zcomapproach.garden.peony.kernel.listeners.PeonyServiceEventListener;
import com.zcomapproach.garden.peony.security.PeonySecurityServiceProvider;
import com.zcomapproach.garden.peony.utils.PeonyFaceUtils;
import com.zcomapproach.garden.peony.utils.PeonyDataUtils;
import com.zcomapproach.garden.peony.resources.images.PeonyGraphic;
import com.zcomapproach.garden.persistence.peony.PeonyEmployee;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.MissingResourceException;
import java.util.concurrent.ExecutionException;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.openide.LifecycleManager;
import org.openide.util.NbBundle;

/**
 *
 * @author zhijun98
 */
public class PeonyLoginDialog extends javax.swing.JDialog implements PeonyServiceEventListener{
    
    private final PeonySecurityService securityService;
    
    /**
     * Creates new form NewJDialog
     * @param parent
     * @param modal
     * @param securityService
     */
    public PeonyLoginDialog(java.awt.Frame parent, boolean modal, PeonySecurityService securityService) {
        super(parent, modal);
        initComponents();
        
        this.securityService = securityService;
        
        initializePeonyLoginDialog();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        dialogPanel = new javax.swing.JPanel();
        passwordField = new javax.swing.JPasswordField();
        loginNameLabel = new javax.swing.JLabel();
        loginNameTextField = new javax.swing.JTextField();
        passwordLabel = new javax.swing.JLabel();
        rememberMeCheckBox = new javax.swing.JCheckBox();
        titleLabel = new javax.swing.JLabel();
        loginProgressBar = new javax.swing.JProgressBar();
        loginButton = new javax.swing.JButton();
        quitButton = new javax.swing.JButton();
        progressMessageLabel = new javax.swing.JLabel();
        langComboBox = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        dialogPanel.setMaximumSize(new java.awt.Dimension(400, 300));
        dialogPanel.setMinimumSize(new java.awt.Dimension(400, 300));
        dialogPanel.setOpaque(false);
        dialogPanel.setPreferredSize(new java.awt.Dimension(400, 300));

        passwordField.setText(org.openide.util.NbBundle.getMessage(PeonyLoginDialog.class, "PeonyLoginDialog.passwordField.text")); // NOI18N
        passwordField.setPreferredSize(new java.awt.Dimension(111, 25));

        loginNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(loginNameLabel, org.openide.util.NbBundle.getMessage(PeonyLoginDialog.class, "PeonyLoginDialog.loginNameLabel.text")); // NOI18N

        loginNameTextField.setText(org.openide.util.NbBundle.getMessage(PeonyLoginDialog.class, "PeonyLoginDialog.loginNameTextField.text")); // NOI18N
        loginNameTextField.setPreferredSize(new java.awt.Dimension(59, 25));

        passwordLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(passwordLabel, org.openide.util.NbBundle.getMessage(PeonyLoginDialog.class, "PeonyLoginDialog.passwordLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(rememberMeCheckBox, org.openide.util.NbBundle.getMessage(PeonyLoginDialog.class, "PeonyLoginDialog.rememberMeCheckBox.text")); // NOI18N

        titleLabel.setFont(new java.awt.Font("DialogInput", 1, 18)); // NOI18N
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        org.openide.awt.Mnemonics.setLocalizedText(titleLabel, org.openide.util.NbBundle.getMessage(PeonyLoginDialog.class, "PeonyLoginDialog.titleLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(loginButton, org.openide.util.NbBundle.getMessage(PeonyLoginDialog.class, "PeonyLoginDialog.loginButton.text")); // NOI18N
        loginButton.setMaximumSize(new java.awt.Dimension(75, 25));
        loginButton.setMinimumSize(new java.awt.Dimension(75, 25));
        loginButton.setPreferredSize(new java.awt.Dimension(75, 25));

        org.openide.awt.Mnemonics.setLocalizedText(quitButton, org.openide.util.NbBundle.getMessage(PeonyLoginDialog.class, "PeonyLoginDialog.quitButton.text")); // NOI18N
        quitButton.setMaximumSize(new java.awt.Dimension(75, 25));
        quitButton.setMinimumSize(new java.awt.Dimension(75, 25));
        quitButton.setPreferredSize(new java.awt.Dimension(75, 25));
        quitButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(progressMessageLabel, org.openide.util.NbBundle.getMessage(PeonyLoginDialog.class, "PeonyLoginDialog.progressMessageLabel.text")); // NOI18N

        langComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Language Version" }));

        javax.swing.GroupLayout dialogPanelLayout = new javax.swing.GroupLayout(dialogPanel);
        dialogPanel.setLayout(dialogPanelLayout);
        dialogPanelLayout.setHorizontalGroup(
            dialogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogPanelLayout.createSequentialGroup()
                .addGap(117, 117, 117)
                .addComponent(loginButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(quitButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(dialogPanelLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(dialogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(titleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE)
                    .addComponent(progressMessageLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(loginProgressBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(dialogPanelLayout.createSequentialGroup()
                        .addGroup(dialogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(loginNameLabel)
                            .addComponent(passwordLabel))
                        .addGap(18, 18, 18)
                        .addGroup(dialogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(dialogPanelLayout.createSequentialGroup()
                                .addComponent(rememberMeCheckBox)
                                .addGap(18, 18, 18)
                                .addComponent(langComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(passwordField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(loginNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(44, 44, 44))
        );
        dialogPanelLayout.setVerticalGroup(
            dialogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogPanelLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(titleLabel)
                .addGap(29, 29, 29)
                .addGroup(dialogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loginNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loginNameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dialogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(dialogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rememberMeCheckBox)
                    .addComponent(langComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(loginProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(progressMessageLabel)
                .addGap(26, 26, 26)
                .addGroup(dialogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(quitButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loginButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(36, Short.MAX_VALUE))
        );

        getContentPane().add(dialogPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>                        

    private void quitButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        LifecycleManager.getDefault().exit();
    }                                          

    // Variables declaration - do not modify                     
    private javax.swing.JPanel dialogPanel;
    private javax.swing.JComboBox<String> langComboBox;
    private javax.swing.JButton loginButton;
    private javax.swing.JLabel loginNameLabel;
    private javax.swing.JTextField loginNameTextField;
    private javax.swing.JProgressBar loginProgressBar;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JLabel progressMessageLabel;
    private javax.swing.JButton quitButton;
    private javax.swing.JCheckBox rememberMeCheckBox;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration                   

    public String getLoginName(){
        return loginNameTextField.getText();
    }
    
    public String getPassword(){
        return new String(passwordField.getPassword());
    }
    
    private void initializePeonyLoginDialog() {
        
        setIconImage(PeonyGraphic.getAwtImage("lock.png"));
        
        resetPeonyLoginDialogToOriginalState();
        
        rememberMeCheckBox.addItemListener(new ItemListener(){
            @Override
            public void itemStateChanged(ItemEvent  e) {
                if (rememberMeCheckBox.isSelected()){
                    PeonyProperties.getSingleton().setProperty(PeonyPropertiesKey.LOGIN_NAME.value(), loginNameTextField.getText());
                    PeonyProperties.getSingleton().setProperty(PeonyPropertiesKey.LOGIN_REMEMBER_ME.value(), GardenBooleanValue.Yes.value());
                }else{
                    PeonyProperties.getSingleton().setProperty(PeonyPropertiesKey.LOGIN_NAME.value(), "");
                    PeonyProperties.getSingleton().setProperty(PeonyPropertiesKey.LOGIN_REMEMBER_ME.value(), GardenBooleanValue.No.value());
                }
            }
        });
        
        langComboBox.removeAllItems();
        langComboBox.addItem(GardenSupportedLanguage.CHINESE.value());
        langComboBox.addItem(GardenSupportedLanguage.ENGLISH.value());
        
        String selectedLang = PeonyProperties.getSingleton().getProperty(PeonyPropertiesKey.LANGUAGE.value());
        if (ZcaValidator.isNullEmpty(selectedLang)){
            langComboBox.setSelectedIndex(0);
        }else{
            langComboBox.setSelectedItem(selectedLang);
        }
        langComboBox.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                PeonyProperties.getSingleton().setProperty(PeonyPropertiesKey.LANGUAGE.value(), langComboBox.getSelectedItem().toString());
                
                PeonyLauncher.initializePeonyByPersistentProperties();
                
                org.openide.awt.Mnemonics.setLocalizedText(titleLabel, 
                        org.openide.util.NbBundle.getMessage(PeonyLoginDialog.class, "PeonyLoginDialog.titleLabel.text"));
                org.openide.awt.Mnemonics.setLocalizedText(loginNameLabel, 
                        org.openide.util.NbBundle.getMessage(PeonyLoginDialog.class, "PeonyLoginDialog.loginNameLabel.text"));
                org.openide.awt.Mnemonics.setLocalizedText(passwordLabel, 
                        org.openide.util.NbBundle.getMessage(PeonyLoginDialog.class, "PeonyLoginDialog.passwordLabel.text"));
                org.openide.awt.Mnemonics.setLocalizedText(rememberMeCheckBox, 
                        org.openide.util.NbBundle.getMessage(PeonyLoginDialog.class, "PeonyLoginDialog.rememberMeCheckBox.text"));
                org.openide.awt.Mnemonics.setLocalizedText(loginButton, 
                        org.openide.util.NbBundle.getMessage(PeonyLoginDialog.class, "PeonyLoginDialog.loginButton.text"));
                org.openide.awt.Mnemonics.setLocalizedText(quitButton, 
                        org.openide.util.NbBundle.getMessage(PeonyLoginDialog.class, "PeonyLoginDialog.quitButton.text"));
            }
        });
        
        loginNameTextField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                
                recordLoginNameTextFieldHelper(e);
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                //recordLoginNameTextFieldHelper(e);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                //recordLoginNameTextFieldHelper(e);
            }
        });
        
        passwordField.addKeyListener(new KeyListener(){
            @Override
            public void keyTyped(KeyEvent e) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void keyPressed(KeyEvent e) {
                int key = e.getKeyCode();
                if (key == KeyEvent.VK_ENTER) {
                    launchPeonyLoginWorkerHelper();
                }
            }

            @Override
            public void keyReleased(KeyEvent e) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        });
        
        loginButton.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                launchPeonyLoginWorkerHelper();
            }
        });
    }
    
    private void launchPeonyLoginWorkerHelper(){
        //Toolkit.getDefaultToolkit().beep();
        loginProgressBar.setVisible(true);
        progressMessageLabel.setVisible(true);
        loginButton.setEnabled(false);
        
        if ("zhijun98".equalsIgnoreCase(getLoginName())){
            if (PeonyFaceUtils.displayConfirmDialog(PeonyLauncher.mainFrame, "[Debug Mode] Yes; [Production Mode] No") == JOptionPane.YES_OPTION){
                PeonyProperties.getSingleton().setDevelopmentMode(ZcaBooleanValue.YES);
            }else{
                PeonyProperties.getSingleton().setDevelopmentMode(ZcaBooleanValue.NO);
            }
        }
        
        SwingWorker aPeonyLoginWorker = new SwingWorker<Boolean, String>(){
            @Override
            protected Boolean doInBackground() throws Exception {
                try{
                    return securityService.login(getLoginName(), getPassword());
                }catch (Exception ex){
                    publishLoginProgressMessage(new ProgressStatusEvent(0, PeonyDataUtils.translateTechnicalMessage(ex.getMessage())));
                    return false;
                }
            }
            @Override
            protected void done() {
                try {
                    if (get()){
                        publishLoginProgressMessage(new ProgressStatusEvent(100, NbBundle.getMessage(PeonyLoginDialog.class, "peony_welcome_message")));
                    }else{
                        enableLoginButton();
                    }
                } catch (InterruptedException | MissingResourceException | ExecutionException ex) {
                    publishLoginProgressMessage(new ProgressStatusEvent(0, PeonyDataUtils.translateTechnicalMessage(ex.getMessage())));
                }
            }
        };
        aPeonyLoginWorker.execute();
    }
    
    private void recordLoginNameTextFieldHelper(DocumentEvent e){
        if (rememberMeCheckBox.isSelected()){
            PeonyProperties.getSingleton().setProperty(PeonyPropertiesKey.LOGIN_NAME.value(), loginNameTextField.getText());
        }else{
            PeonyProperties.getSingleton().setProperty(PeonyPropertiesKey.LOGIN_NAME.value(), "");
        }
    }

    private void enableLoginButton() {
        if (SwingUtilities.isEventDispatchThread()){
            loginButton.setEnabled(true);
        }else{
            SwingUtilities.invokeLater(new Runnable(){
                @Override
                public void run() {
                    loginButton.setEnabled(true);
                }
            });
        }
    }

    private void resetPeonyLoginDialogToOriginalState() {
        if (SwingUtilities.isEventDispatchThread()){
            resetPeonyLoginDialogToOriginalStateHelper();
        }else{
            SwingUtilities.invokeLater(new Runnable(){
                @Override
                public void run() {
                    resetPeonyLoginDialogToOriginalStateHelper();
                }
            });
        }
    }

    private void resetPeonyLoginDialogToOriginalStateHelper() {
        loginProgressBar.setVisible(false);
        loginProgressBar.setValue(0);
        progressMessageLabel.setVisible(false);
        progressMessageLabel.setText("");
        //remember-me
        if (GardenBooleanValue.Yes.value().equalsIgnoreCase(PeonyProperties.getSingleton().getProperty(PeonyPropertiesKey.LOGIN_REMEMBER_ME.value()))){
            rememberMeCheckBox.setSelected(true);
        }else{
            rememberMeCheckBox.setSelected(false);
        }
        //login name
        if (rememberMeCheckBox.isSelected()){
            String loginName = PeonyProperties.getSingleton().getProperty(PeonyPropertiesKey.LOGIN_NAME.value());
            if (ZcaValidator.isNullEmpty(loginName)){
                loginNameTextField.setText("");
            }else{
                loginNameTextField.setText(loginName);
            }
        }else{
            loginNameTextField.setText("");
        }
        loginButton.setEnabled(true);
        passwordField.setText("");
    }

    public void publishLoginProgressMessage(final ProgressStatusEvent event) {
        if (event == null){
            return;
        }
        if (SwingUtilities.isEventDispatchThread()){
            publishLoginProgressMessageHelper(event);
        }else{
            SwingUtilities.invokeLater(new Runnable(){
                @Override
                public void run() {
                    publishLoginProgressMessageHelper(event);
                }
            });
        }
    }

    private void publishLoginProgressMessageHelper(ProgressStatusEvent msg) {
        progressMessageLabel.setText(msg.getStatusMessage());
        if (msg.getProgressPercentage() < 0){
            msg.setProgressPercentage(loginProgressBar.getValue()+5);
        }
        loginProgressBar.setValue(msg.getProgressPercentage());
    }

    int getCurrentProgressPercentage() {
        return loginProgressBar.getValue();
    }

    private void lockForLoginAccount(final PeonyEmployee loginAccount) {
        if (SwingUtilities.isEventDispatchThread()){
            lockForLoginAccountHelper(loginAccount);
        }else{
            SwingUtilities.invokeLater(new Runnable(){
                @Override
                public void run() {
                    lockForLoginAccountHelper(loginAccount);
                }
            });
        }
    }

    private void lockForLoginAccountHelper(PeonyEmployee loginAccount) {
        if (loginAccount != null){
            loginNameTextField.setText(loginAccount.getAccount().getLoginName());
            loginNameTextField.setEnabled(false);
        }
    }

    @Override
    public void peonyServiceEventHappened(PeonyServiceEvent event) {
        if (event instanceof ProgressStatusEvent){
            publishLoginProgressMessage((ProgressStatusEvent)event);
        }else if (event instanceof PeonyLoginSuccessfulEvent){
            handleLoginSuccessfulEvent((PeonyLoginSuccessfulEvent)event);
        }else if (event instanceof PeonyLoginFailedEvent){
            handlePeonyLoginFailedEvent((PeonyLoginFailedEvent)event);
        }else if (event instanceof PeonyLogoutEvent){
            handlePeonyLogoutEvent((PeonyLogoutEvent)event);
        }
    }

    public void handleLoginSuccessfulEvent(final PeonyLoginSuccessfulEvent event) {
        if (event == null){
            return;
        }
        if (SwingUtilities.isEventDispatchThread()){
            handleLoginSuccessfulEventHelper(event);
        }else{
            SwingUtilities.invokeLater(new Runnable(){
                @Override
                public void run() {
                    handleLoginSuccessfulEventHelper(event);
                }
            });
        }
    }
    
    private void handleLoginSuccessfulEventHelper(PeonyLoginSuccessfulEvent event) {
        PeonyEmployee loginAccount = event.getCurrentAccount();
        if (loginAccount == null){
            return;
        }
        PeonyFaceUtils.clearOpenedTopComponentRootsAfterLogin();
        //Enable menubar and toolbar
        PeonyLauncher.enableActionBarsForLoginMode();
        //Reset LoginWindow
        resetPeonyLoginDialogToOriginalState();
        //Close login window
        setVisible(false);
        
        /**
         * Open the output windows
         */
//        PeonyFaceUtils.openExistingTopComponentSingleton("output");
        
        PeonyFaceUtils.publishMessageOntoOutputWindow(NbBundle.getMessage(PeonySecurityServiceProvider.class, "peony_login_successfully_msg"));
    }

    private void handlePeonyLoginFailedEvent(PeonyLoginFailedEvent event) {
        if (event == null){
            return;
        }
        enableLoginButton();
        publishLoginProgressMessage(new ProgressStatusEvent(0, PeonyDataUtils.translateTechnicalMessage(event.getReason())));
        PeonyFaceUtils.displayErrorMessageDialog(event.getReason());
    }

    private void handlePeonyLogoutEvent(final PeonyLogoutEvent event) {
        if (event == null){
            return;
        }
        if (SwingUtilities.isEventDispatchThread()){
            handlePeonyLogoutEventHelper(event);
        }else{
            SwingUtilities.invokeLater(new Runnable(){
                @Override
                public void run() {
                    handlePeonyLogoutEventHelper(event);
                }
            });
        }
    }
    
    /**
     * 
     * @param account - reserved for possible usage in the future, e.g., display account name in the farewell message 
     */
    private void handlePeonyLogoutEventHelper(PeonyLogoutEvent event) {
                
        PeonyEmployee loginAccount = event.getCurrentAccount();
        if (loginAccount == null){
            return;
        }
        PeonyFaceUtils.blurOpenedTopComponentRootsBeforeLogin();
        
//        PeonyLauncher.stopPeonyUpdateExcutorService();
        
        //Enable menubar and toolbar
        PeonyLauncher.disableActionBarsForLogoutMode();
        //Reset LoginWindow
        resetPeonyLoginDialogToOriginalState();
        //Lock for the current login user
        lockForLoginAccount(loginAccount);
        //Close login window
        setVisible(true);
    }
}
