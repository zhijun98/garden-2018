/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.zcomapproach.garden.peony.email;

import com.zcomapproach.garden.email.GardenEmailMessage;
import com.zcomapproach.garden.email.GardenEmailUtils;
import com.zcomapproach.garden.peony.PeonyTopComponent;
import com.zcomapproach.garden.peony.view.PeonyFaceController;
import com.zcomapproach.garden.peony.view.events.JFXPanelLoadedEvent;
import com.zcomapproach.garden.peony.resources.images.PeonyGraphic;
import com.zcomapproach.garden.persistence.peony.PeonyOfflineEmail;
import java.io.IOException;
import javafx.scene.Scene;
import javafx.scene.layout.BorderPane;
import javax.imageio.ImageIO;
import org.openide.util.Exceptions;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Non-singleton top component which displays email content with other email functions.
 */
@TopComponent.Description(
        preferredID = "ViewEmailTopComponent",
        iconBase = "com/zcomapproach/garden/peony/resources/images/checked_msg.png",
        persistenceType = TopComponent.PERSISTENCE_NEVER
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@Messages({
    "CTL_ViewEmailTopComponent=View Email Window",
    "HINT_ViewEmailTopComponent=This is a View-Email window"
})
public final class ViewEmailTopComponent extends PeonyTopComponent {
    
    private ViewEmailPanel viewEmailPanel;
    
    private GardenEmailMessage targetGardenEmailMessage;
    private PeonyOfflineEmail targetPeonyOfflineEmail;
    private boolean readOnly;
    
    public ViewEmailTopComponent() {
        //initComponents();
        setName(Bundle.CTL_ViewEmailTopComponent());
        setToolTipText(Bundle.HINT_ViewEmailTopComponent());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

    @Override
    public String getTargetTopComponetUuid() {
        if (targetGardenEmailMessage == null){
            return this.getName();
        }else{
            return targetGardenEmailMessage.getFolderFullName() + targetGardenEmailMessage.getEmailMsgUid();
        }
    }

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    @Override
    protected PeonyFaceController createPeonyFaceController() {
        throw new UnsupportedOperationException("Not supported in this top component instance.");
    }

    @Override
    public void launchPeonyTopComponent(String windowName) {
        throw new UnsupportedOperationException("Not supported for this top component instance.");
    }

    public void launchViewEmailTopComponent(GardenEmailMessage targetGardenEmailMessage, PeonyOfflineEmail targetPeonyOfflineEmail, boolean readOnly) {
        if (targetGardenEmailMessage.isTaskMessage()){
            try {
                setIcon(ImageIO.read(PeonyGraphic.getImageInputStream("urgent_msg.png")));
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
        this.targetGardenEmailMessage = targetGardenEmailMessage;
        this.targetPeonyOfflineEmail = targetPeonyOfflineEmail;
        this.readOnly = readOnly;
        
        super.launchPeonyTopComponent(GardenEmailUtils.convertAddressListToText(targetGardenEmailMessage.getFromList()));
        
    }

    @Override
    protected void constructTopComponent() {
        viewEmailPanel = new ViewEmailPanel(targetGardenEmailMessage, targetPeonyOfflineEmail, readOnly);
        viewEmailPanel.addPeonyFaceEventListenerList(getPeonyFaceEventListenerList());
        BorderPane rootBorderPane = new BorderPane();
        rootBorderPane.setCenter(viewEmailPanel);
        
        Scene scene = new Scene(rootBorderPane);
        rootBorderPane.prefHeightProperty().bind(scene.heightProperty());
        rootBorderPane.prefWidthProperty().bind(scene.widthProperty());

        getJfxPanel().setScene(scene);

        this.peonyFaceEventHappened(new JFXPanelLoadedEvent());
        
    }
    
    /**
     * Demand Platform-GUI-Thread
     * @param aPeonyEmailMesage 
     */
    public void handlePeonyEmailMessageUpdated(GardenEmailMessage aPeonyEmailMesage){
        if (viewEmailPanel != null){
            viewEmailPanel.updateGardenEmailMessage(aPeonyEmailMesage);
        }
    }

    public void setDeleteButtonEnabled(boolean value) {
        if (viewEmailPanel != null){
            viewEmailPanel.setDeleteButtonEnabled(value);
        }
    }

}
