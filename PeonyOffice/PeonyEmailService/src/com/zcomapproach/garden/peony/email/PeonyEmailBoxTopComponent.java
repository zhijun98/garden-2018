/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.zcomapproach.garden.peony.email;

import com.zcomapproach.garden.email.GardenEmailMessage;
import com.zcomapproach.garden.peony.PeonyTopComponent;
import com.zcomapproach.garden.peony.email.controllers.OfflineEmailBoxController;
import com.zcomapproach.garden.peony.email.controllers.PeonyEmailBoxController;
import com.zcomapproach.garden.peony.email.events.DeletePeonyEmailMessageEvent;
import com.zcomapproach.garden.peony.email.events.SendGardenEmailMessageRequest;
import com.zcomapproach.garden.peony.kernel.services.PeonyManagementService;
import com.zcomapproach.garden.peony.utils.PeonyDataUtils;
import com.zcomapproach.garden.peony.utils.PeonyFaceUtils;
import com.zcomapproach.garden.peony.view.PeonyFaceController;
import com.zcomapproach.garden.peony.view.events.JFXPanelLoadedEvent;
import com.zcomapproach.garden.peony.view.events.PeonyFaceEvent;
import com.zcomapproach.garden.persistence.peony.PeonyOfflineEmail;
import com.zcomapproach.garden.rest.GardenRestParams;
import java.util.concurrent.ExecutionException;
import javafx.concurrent.Task;
import javafx.util.Pair;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@TopComponent.Description(
        preferredID = "PeonyEmailBoxTopComponent",
        iconBase = "com/zcomapproach/garden/peony/resources/images/mailbox.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "explorer", openAtStartup = false)
@ActionID(category = "Window", id = "com.zcomapproach.garden.peony.email.PeonyEmailBoxTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_PeonyEmailBoxAction",
        preferredID = "PeonyEmailBoxTopComponent"
)
@Messages({
    "CTL_PeonyEmailBoxAction=Peony Email Box",
    "CTL_PeonyEmailBoxTopComponent=Peony Email Box",
    "HINT_PeonyEmailBoxTopComponent=This is a PeonyEmailBox window"
})
public final class PeonyEmailBoxTopComponent extends PeonyTopComponent {
    
    private PeonyEmailBoxController targetPeonyEmailBoxController;

    public PeonyEmailBoxTopComponent() {
        //initComponents();
        setName(Bundle.CTL_PeonyEmailBoxTopComponent());
        setToolTipText(Bundle.HINT_PeonyEmailBoxTopComponent());
        putClientProperty(TopComponent.PROP_CLOSING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_KEEP_PREFERRED_SIZE_WHEN_SLIDED_IN, Boolean.TRUE);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        if (targetPeonyEmailBoxController != null){
            targetPeonyEmailBoxController.shutdownEmailServices();
        }
    }

    @Override
    public void peonyFaceEventHappened(PeonyFaceEvent event) {
        if (event instanceof SendGardenEmailMessageRequest){
            handleSendGardenEmailMessageRequest((SendGardenEmailMessageRequest)event);
        }else if (event instanceof DeletePeonyEmailMessageEvent){
            if (targetPeonyEmailBoxController != null){
                targetPeonyEmailBoxController.deletePeonyEmailMessage(((DeletePeonyEmailMessageEvent)event).getGardenEmailMessage());
            }
        }else if (event instanceof JFXPanelLoadedEvent){
            super.peonyFaceEventHappened(event);
        }
    }
    
    @Override
    protected PeonyFaceController createPeonyFaceController() {
        if (getPeonyFaceController() == null){
            targetPeonyEmailBoxController = new OfflineEmailBoxController();
            targetPeonyEmailBoxController.addPeonyFaceEventListener(this);
            return targetPeonyEmailBoxController;
        }
        return getPeonyFaceController();
    }

    private void handleSendGardenEmailMessageRequest(SendGardenEmailMessageRequest sendGardenEmailMessageRequest) {
        if (targetPeonyEmailBoxController != null){
            targetPeonyEmailBoxController.sendGardenEmailMessage(sendGardenEmailMessageRequest.getGardenEmailMessage(), sendGardenEmailMessageRequest.getPeonyOfflineEmail());
        }
    }

    public void openPeonyEmailTagDialigByTagUuid(String emailTagUuid) {
        targetPeonyEmailBoxController.displayAssignEmailDialog(emailTagUuid);
    }
    
    public void openPeonyEmailMessageTabByEmailTagUuid(final String emailTagUuid) {
        GardenEmailMessage aGardenEmailMessage = targetPeonyEmailBoxController.findGardenEmailMessageByEmailTagUuid(emailTagUuid);
        if (aGardenEmailMessage == null){
            Task<Pair<GardenEmailMessage, PeonyOfflineEmail>> openPeonyEmailMessageTabByEmailTagUuidTask = new Task<Pair<GardenEmailMessage, PeonyOfflineEmail>>(){
                @Override
                protected Pair<GardenEmailMessage, PeonyOfflineEmail> call() throws Exception {
                    PeonyOfflineEmail aPeonyOfflineEmail = Lookup.getDefault().lookup(PeonyManagementService.class)
                            .getPeonyManagementRestClient().findEntity_XML(PeonyOfflineEmail.class, 
                                    GardenRestParams.Management.findPeonyOfflineEmailByEmailTagUuidRestParams(emailTagUuid));
                    //get the message instance to display
                    return new Pair<>(PeonyDataUtils.convertToGardenEmailMessageByDeserialization(aPeonyOfflineEmail), aPeonyOfflineEmail);
                    
                }

                @Override
                protected void failed() {
                    PeonyFaceUtils.displayErrorMessageDialog("Cannot display this email message because of technical errors. " + getMessage());
                }

                @Override
                protected void succeeded() {
                    try {
                        Pair<GardenEmailMessage, PeonyOfflineEmail> result = get();
                        if (result.getKey() == null){
                            PeonyFaceUtils.displayErrorMessageDialog("Cannot display the selected email message.");
                        }else{
                            /**
                             * In this case, this request is to ask displaying email which came from other employee's local storage
                             */
                            targetPeonyEmailBoxController.openPeonyEmailMessageTabByEDT(result.getKey(), result.getValue(), true);
                        }
                    } catch (InterruptedException | ExecutionException ex) {
                        //Exceptions.printStackTrace(ex);
                        PeonyFaceUtils.displayErrorMessageDialog("Cannot display this email message because of technical errors. " + ex.getMessage());
                    }
                }
            };
            this.getSingleExecutorService().submit(openPeonyEmailMessageTabByEmailTagUuidTask);
        }else{
            targetPeonyEmailBoxController.openPeonyEmailMessageTabByEDT(aGardenEmailMessage, getAssociatePeonyOfflineEmail(aGardenEmailMessage), false);
        }
    }

    public void openPeonyEmailMessageTabByOfflineEmailUuid(final String offlineEmailUuid) {
        GardenEmailMessage aGardenEmailMessage = targetPeonyEmailBoxController.findGardenEmailMessageByOfflineEmailUuid(offlineEmailUuid);
        if (aGardenEmailMessage == null){
            Task<Pair<GardenEmailMessage, PeonyOfflineEmail>> findGardenEmailMessageByOfflineEmailUuidTask = new Task<Pair<GardenEmailMessage, PeonyOfflineEmail>>(){
                @Override
                protected Pair<GardenEmailMessage, PeonyOfflineEmail> call() throws Exception {
                    PeonyOfflineEmail aPeonyOfflineEmail = Lookup.getDefault().lookup(PeonyManagementService.class)
                            .getPeonyManagementRestClient().findEntity_XML(PeonyOfflineEmail.class, 
                                    GardenRestParams.Management.findPeonyOfflineEmailByUuidRestParams(offlineEmailUuid));
                    //get the message instance to display
                    return new Pair<>(PeonyDataUtils.convertToGardenEmailMessageByDeserialization(aPeonyOfflineEmail), aPeonyOfflineEmail);
                    
                }

                @Override
                protected void failed() {
                    PeonyFaceUtils.displayErrorMessageDialog("Cannot display this email message because of technical errors. " + getMessage());
                }

                @Override
                protected void succeeded() {
                    try {
                        Pair<GardenEmailMessage, PeonyOfflineEmail> result = get();
                        if (result.getKey() == null){
                            PeonyFaceUtils.displayErrorMessageDialog("Cannot display the selected email message.");
                        }else{
                            /**
                             * In this case, this request is to ask displaying email which came from other employee's local storage
                             */
                            targetPeonyEmailBoxController.openPeonyEmailMessageTabByEDT(result.getKey(), result.getValue(), true);
                        }
                    } catch (InterruptedException | ExecutionException ex) {
                        //Exceptions.printStackTrace(ex);
                        PeonyFaceUtils.displayErrorMessageDialog("Cannot display this email message because of technical errors. " + ex.getMessage());
                    }
                }
            };
            this.getSingleExecutorService().submit(findGardenEmailMessageByOfflineEmailUuidTask);
        }else{
            targetPeonyEmailBoxController.openPeonyEmailMessageTabByEDT(aGardenEmailMessage, getAssociatePeonyOfflineEmail(aGardenEmailMessage), false);
        }
    }
    
    public PeonyOfflineEmail getAssociatePeonyOfflineEmail(GardenEmailMessage aGardenEmailMessage){
        return targetPeonyEmailBoxController.getAssociatePeonyOfflineEmail(aGardenEmailMessage);
    }

    public String getMailboxAddress() {
        return targetPeonyEmailBoxController.getGardenEmailBox().getGardenMailBoxAddess();
    }
}
