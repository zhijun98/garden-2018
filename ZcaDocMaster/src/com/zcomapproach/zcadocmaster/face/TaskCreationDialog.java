/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.zcomapproach.zcadocmaster.face;

import com.zcomapproach.zcadocmaster.face.worker.ZcaDocTask;
import com.zcomapproach.zcaglobals.commons.ZDataGlobal;
import com.zcomapproach.zcaglobals.nio.ZNioUtilities;
import java.io.File;
import java.util.Calendar;
import java.util.GregorianCalendar;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author Zhijun Zhang
 */
public class TaskCreationDialog extends javax.swing.JDialog {

    private final JFileChooser fileChooser;
    
    private ZcaDocFrame owner;

    /**
     * Creates new form CreateTaskDialog
     * @param parent
     * @param modal
     */
    public TaskCreationDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        if (parent instanceof ZcaDocFrame){
            this.owner = (ZcaDocFrame)parent;
        }
        
        fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        try{
            fileChooser.setSelectedFile(new File(ZNioUtilities.getSystemUserHomePath()));
            jSourcePath.setText(ZNioUtilities.getSystemUserHomePath());
            jBackupPath.setText(ZNioUtilities.getSystemUserHomePath());
        }catch(Exception ex){
            jSourcePath.setText("");
            jBackupPath.setText("");
        }
        initTaskScheduler();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jWeeklyDayGroup = new javax.swing.ButtonGroup();
        jOverwrite = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        jSunday = new javax.swing.JCheckBox();
        jMonday = new javax.swing.JCheckBox();
        jTuesday = new javax.swing.JCheckBox();
        jWednesday = new javax.swing.JCheckBox();
        jThursday = new javax.swing.JCheckBox();
        jFriday = new javax.swing.JCheckBox();
        jSaturday = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jSelectSourcePath = new javax.swing.JButton();
        jSelectBackupPath = new javax.swing.JButton();
        jSourcePath = new javax.swing.JTextField();
        jBackupPath = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jHour = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jMinute = new javax.swing.JComboBox();
        jSecond = new javax.swing.JComboBox();
        jAppendSuffix = new javax.swing.JCheckBox();
        jPanel5 = new javax.swing.JPanel();
        jCheckAllDayOfWeek = new javax.swing.JButton();
        jResetAllDayOfWeek = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jSaveTask = new javax.swing.JButton();
        jCancel = new javax.swing.JButton();

        setTitle("Backup Task Creation");
        setMinimumSize(new java.awt.Dimension(600, 400));
        setPreferredSize(new java.awt.Dimension(600, 400));

        jOverwrite.setText("Overwrite if anything existed with new timestamp. ");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Backup Day:"));
        jPanel1.setLayout(new java.awt.GridLayout(7, 1, 0, 2));

        jSunday.setText("Sunday");
        jPanel1.add(jSunday);

        jMonday.setText("Monday");
        jPanel1.add(jMonday);

        jTuesday.setText("Tuesday");
        jPanel1.add(jTuesday);

        jWednesday.setText("Wednesday");
        jPanel1.add(jWednesday);

        jThursday.setText("Thursday");
        jPanel1.add(jThursday);

        jFriday.setText("Friday");
        jPanel1.add(jFriday);

        jSaturday.setText("Saturday");
        jPanel1.add(jSaturday);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Backup Task:"));

        jSelectSourcePath.setText("Select Source Folder");
        jSelectSourcePath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSelectSourcePathActionPerformed(evt);
            }
        });

        jSelectBackupPath.setText("Select Backup Folder");
        jSelectBackupPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSelectBackupPathActionPerformed(evt);
            }
        });

        jSourcePath.setEditable(false);
        jSourcePath.setText("jTextField2");

        jBackupPath.setText("jTextField2");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBackupPath, javax.swing.GroupLayout.DEFAULT_SIZE, 385, Short.MAX_VALUE)
                    .addComponent(jSourcePath))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSelectSourcePath, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSelectBackupPath, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jSourcePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSelectSourcePath))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jBackupPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSelectBackupPath))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Backup Time:"));

        jHour.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23" }));

        jLabel1.setText("Hour:");

        jLabel2.setText("Minute:");

        jLabel3.setText("Second:");

        jMinute.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59" }));

        jSecond.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59" }));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSecond, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jMinute, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jHour, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jMinute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jSecond, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jAppendSuffix.setText("Append suffix _MMddyyyyHHmmss for backup folder");

        jPanel5.setLayout(new java.awt.GridLayout(2, 1, 0, 2));

        jCheckAllDayOfWeek.setText("Check All");
        jCheckAllDayOfWeek.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckAllDayOfWeekActionPerformed(evt);
            }
        });
        jPanel5.add(jCheckAllDayOfWeek);

        jResetAllDayOfWeek.setText("Reset All");
        jResetAllDayOfWeek.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jResetAllDayOfWeekActionPerformed(evt);
            }
        });
        jPanel5.add(jResetAllDayOfWeek);

        jPanel4.setLayout(new java.awt.GridLayout(2, 1, 0, 2));

        jSaveTask.setText("Save Task");
        jSaveTask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSaveTaskActionPerformed(evt);
            }
        });
        jPanel4.add(jSaveTask);

        jCancel.setText("Cancel");
        jCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCancelActionPerformed(evt);
            }
        });
        jPanel4.add(jCancel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jOverwrite, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(16, 16, 16))
                            .addComponent(jAppendSuffix, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jOverwrite)
                    .addComponent(jAppendSuffix))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 11, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jSelectSourcePathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSelectSourcePathActionPerformed
        // Select a target-folder for backup
        fileChooser.setDialogTitle("Step 1: select a source-folder for the task");
        fileChooser.setApproveButtonText("Source Folder");
        if (fileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            File sourceFolder = new File(fileChooser.getSelectedFile().getAbsolutePath());
            if (sourceFolder.isDirectory()){
                jSourcePath.setText(sourceFolder.getAbsolutePath());
                jBackupPath.setText(sourceFolder.getAbsolutePath());
            }
        }
    }//GEN-LAST:event_jSelectSourcePathActionPerformed

    private void jSelectBackupPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSelectBackupPathActionPerformed
        //Select a destination-folder for backup
        fileChooser.setDialogTitle("Step 2: select a backup-folder for the task");
        fileChooser.setApproveButtonText("Backup Folder");
        if (fileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            File backupFolder = new File(fileChooser.getSelectedFile().getAbsolutePath());
            if (backupFolder.isDirectory()){
                jBackupPath.setText(backupFolder.getAbsolutePath());
            }
        }
    }//GEN-LAST:event_jSelectBackupPathActionPerformed

    private void jSaveTaskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSaveTaskActionPerformed
        ZcaDocTask aZcaDocTask = createZcaDocTask();
        if (aZcaDocTask != null){
            owner.addZcaDocTask(aZcaDocTask);
            setVisible(false);
        }
    }//GEN-LAST:event_jSaveTaskActionPerformed

    private void jCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCancelActionPerformed
        setVisible(false);
    }//GEN-LAST:event_jCancelActionPerformed

    private void jCheckAllDayOfWeekActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckAllDayOfWeekActionPerformed
        setDayOfWeekCheckBox(true);
    }//GEN-LAST:event_jCheckAllDayOfWeekActionPerformed

    private void jResetAllDayOfWeekActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jResetAllDayOfWeekActionPerformed
        setDayOfWeekCheckBox(false);
    }//GEN-LAST:event_jResetAllDayOfWeekActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jAppendSuffix;
    private javax.swing.JTextField jBackupPath;
    private javax.swing.JButton jCancel;
    private javax.swing.JButton jCheckAllDayOfWeek;
    private javax.swing.JCheckBox jFriday;
    private javax.swing.JComboBox jHour;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JComboBox jMinute;
    private javax.swing.JCheckBox jMonday;
    private javax.swing.JCheckBox jOverwrite;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JButton jResetAllDayOfWeek;
    private javax.swing.JCheckBox jSaturday;
    private javax.swing.JButton jSaveTask;
    private javax.swing.JComboBox jSecond;
    private javax.swing.JButton jSelectBackupPath;
    private javax.swing.JButton jSelectSourcePath;
    private javax.swing.JTextField jSourcePath;
    private javax.swing.JCheckBox jSunday;
    private javax.swing.JCheckBox jThursday;
    private javax.swing.JCheckBox jTuesday;
    private javax.swing.JCheckBox jWednesday;
    private javax.swing.ButtonGroup jWeeklyDayGroup;
    // End of variables declaration//GEN-END:variables

    private void initTaskScheduler() {
        GregorianCalendar now = new GregorianCalendar();
        jHour.setSelectedIndex(now.get(Calendar.HOUR_OF_DAY));
        jMinute.setSelectedIndex(now.get(Calendar.MINUTE));
        jSecond.setSelectedIndex(now.get(Calendar.SECOND));
//        int day = now.get(Calendar.DAY_OF_WEEK)+1;
//        switch (day){
//            case 1:
//                jSunday.setSelected(true);
//                break;
//            case 2:
//                jMonday.setSelected(true);
//                break;
//            case 3:
//                jTuesday.setSelected(true);
//                break;
//            case 4:
//                jWednesday.setSelected(true);
//                break;
//            case 5:
//                jThursday.setSelected(true);
//                break;
//            case 6:
//                jFriday.setSelected(true);
//                break;
//            case 7:
//                jSaturday.setSelected(true);
//                break;
//        }
    }

    private void setDayOfWeekCheckBox(boolean value){
        jSunday.setSelected(value);
        jMonday.setSelected(value);
        jTuesday.setSelected(value);
        jWednesday.setSelected(value);
        jThursday.setSelected(value);
        jFriday.setSelected(value);
        jSaturday.setSelected(value);
    }
    
    private ZcaDocTask createZcaDocTask() {
        ZcaDocTask aZcaDocTask = new ZcaDocTask();
        aZcaDocTask.setSourcePath(jSourcePath.getText());
        if (ZDataGlobal.isEmptyNullString(aZcaDocTask.getSourcePath())){
            displayMessageDialog("You have to select source folder for the backup task!");
            return null;
        }
        aZcaDocTask.setBackupPath(jBackupPath.getText());
        if (ZDataGlobal.isEmptyNullString(aZcaDocTask.getBackupPath())){
            displayMessageDialog("You have to select backup folder for the backup task!");
            return null;
        }else{
            aZcaDocTask.setBackupPathSuffixRequired(jAppendSuffix.isSelected());
        }
        if (aZcaDocTask.getSourcePath().equalsIgnoreCase(aZcaDocTask.getBackupPath())){
            displayMessageDialog("Your backup folder cannot be the same as your source folder!");
            return null;
        }
        aZcaDocTask.setOverwriteRequired(jOverwrite.isSelected());
        if (jSunday.isSelected()){
            aZcaDocTask.getDayOfWeekList().add(Calendar.SUNDAY);
        }
        if (jMonday.isSelected()){
            aZcaDocTask.getDayOfWeekList().add(Calendar.MONDAY);
        }
        if (jTuesday.isSelected()){
            aZcaDocTask.getDayOfWeekList().add(Calendar.TUESDAY);
        }
        if (jWednesday.isSelected()){
            aZcaDocTask.getDayOfWeekList().add(Calendar.WEDNESDAY);
        }
        if (jThursday.isSelected()){
            aZcaDocTask.getDayOfWeekList().add(Calendar.THURSDAY);
        }
        if (jFriday.isSelected()){
            aZcaDocTask.getDayOfWeekList().add(Calendar.FRIDAY);
        }
        if (jSaturday.isSelected()){
            aZcaDocTask.getDayOfWeekList().add(Calendar.SATURDAY);
        }
        
        aZcaDocTask.setHourOfDay(jHour.getSelectedIndex());
        aZcaDocTask.setMinute(jMinute.getSelectedIndex());
        aZcaDocTask.setSecond(jSecond.getSelectedIndex());
        
        if (aZcaDocTask.getDayOfWeekList().isEmpty()){
            displayMessageDialog("You did not select backup day for the backup task. "
                    + "It means it will not be automatically run by ZcaDocMaster's internal scheduler.");
        }else{
            /**
             * Scheduled tasks have to be appended suffix.
             */
            aZcaDocTask.setBackupPathSuffixRequired(true);
        }
        return aZcaDocTask;
    }

    private void displayMessageDialog(final String message) {
        if (SwingUtilities.isEventDispatchThread()){
            JOptionPane.showMessageDialog(TaskCreationDialog.this, message);
        }else{
            SwingUtilities.invokeLater(new Runnable(){
                @Override
                public void run() {
                    JOptionPane.showMessageDialog(TaskCreationDialog.this, message);
                }
            });
        }
    }
}
